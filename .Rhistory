), ncol = 4)
utility <- estimate_knapsack_utility(items, 2) %>% distinct()
mini <- strat_minimax_2(utility)
mini
mini$solution
apply(items, 2, mean)
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 2) %>% distinct()
mini <- strat_minimax_2(utility)
mini
mini$solution
apply(items, 2, mean)
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 3) %>% distinct()
mini <- strat_minimax_3(utility)
mini
mini$solution
apply(items, 2, mean)
utility
c(-1, 1)[rep(c(1,2), 10)]
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
items
apply(items, 2, mean)
tble(items)
table(items)
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 3) %>% distinct()
mini <- strat_minimax_3(utility)
mini
mini$solution
apply(items, 2, mean)
utility
utility <- estimate_knapsack_utility(items, 3)
sum(utility$utility)
utility <- data_frame(
knap_id = c(1, 1, 1, 2, 2, 2),
matchup = c("1;1;1", "1;1;2", "1;2;2", "2;1;1", "2;2;1", "2;2;2"),
utility = c(0, -0.25, 0.5, 0.5, -0.25, 0)
)
mini <- strat_minimax_3(utility)
utility <- estimate_knapsack_utility(items, 3)
utilit
utility
utility <- data_frame(
knap_id = c(1, 1, 1, 2, 2, 2),
matchup = c("1;1;1", "1;1;2", "1;2;2", "2;1;1", "2;2;1", "2;2;2"),
utility = c(0, -0.25, 0.5, 0.5, -0.25, 0)
)
utility
strat_minimax_3(utility)
mini <- strat_minimax_2(utility)
# Three player minimax
strat_minimax_3 <- function(knaps, print_results = F) {
strats <- sort(unique(knaps$knap_id))
tmp <- MIPModel() %>%
add_variable(row_utility, type = "continuous") %>%
add_variable(row_pr[i], i = strats, type = "continuous", lb = 0, ub = 1) %>%
set_objective(row_utility, "max") %>%
add_constraint(sum_expr(row_pr[i]*knaps$utility[knaps$knap_id == i & knaps$matchup == paste0(sort(c(i, j, k)), collapse = ";")], i = strats) >= row_utility,
j = strats, k = strats) %>%
add_constraint(sum_expr(row_pr[i], i = strats) == 1) %>%
solve_model(with_ROI(solver = "glpk"))
tmp
# if (print_results)
#   print(tmp$solution)
# data_frame(knap_id = strats,
#            probability = as.numeric(tmp$solution)[-(length(strats)+1)]) %>%
#   left_join(knaps, by = "knap_id")
}
strat_minimax_3 <- cmpfun(strat_minimax_3)
utility <- data_frame(
knap_id = c(1, 1, 1, 2, 2, 2),
matchup = c("1;1;1", "1;1;2", "1;2;2", "2;1;1", "2;2;1", "2;2;2"),
utility = c(0, -0.25, 0.5, 0.5, -0.25, 0)
)
mini <- strat_minimax_3(utility)
strats <- sort(unique(knaps$knap_id))
utility <- data_frame(
knap_id = c(1, 1, 1, 2, 2, 2),
matchup = c("1;1;1", "1;1;2", "1;2;2", "2;1;1", "2;2;1", "2;2;2"),
utility = c(0, -0.25, 0.5, 0.5, -0.25, 0)
)
utility
strats <- sort(unique(utility$knap_id))
strats
utility
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
# utility <- estimate_knapsack_utility(items, 3)# %>% distinct()
utility <- data_frame(
knap_id = c(1, 1, 1, 2, 2, 2),
matchup = c("1;1;1", "1;1;2", "1;2;2", "2;1;1", "2;2;1", "2;2;2"),
utility = c(0, -0.25, 0.5, 0.5, -0.25, 0)
)
mini <- strat_minimax_3(utility)
apply(items, 2, mean)
strats <- sort(unique(utility$knap_id))
MIPModel() %>%
add_variable(row_utility, type = "continuous") %>%
add_variable(row_pr[i], i = strats, type = "continuous", lb = 0, ub = 1) %>%
set_objective(row_utility, "max") %>%
add_constraint(sum_expr(row_pr[i]*utility$utility[utility$knap_id == i & utility$matchup == paste0(sort(c(i, j, k)), collapse = ";")], i = strats) >= row_utility,
j = strats, k = strats) %>%
add_constraint(sum_expr(row_pr[i], i = strats) == 1) %>%
solve_model(with_ROI(solver = "glpk"))
MIPModel() %>%
add_variable(row_utility, type = "continuous") %>%
add_variable(row_pr[i], i = strats, type = "continuous", lb = 0, ub = 1) %>%
set_objective(row_utility, "max")
strats <- sort(unique(utility$knap_id))
MIPModel() %>%
add_variable(row_utility, type = "continuous") %>%
add_variable(row_pr[i], i = strats, type = "continuous", lb = 0, ub = 1) %>%
set_objective(row_utility, "max") %>%
add_constraint(sum_expr(row_pr[i]*utility$utility[utility$knap_id == i & utility$matchup == paste0(sort(c(i, j, k)), collapse = ";")], i = strats) >= row_utility,
j = strats, k = strats)
?array
array(1:9, dims = 3)
array(1:9, dim = 1:3)
array(1:9, dim = c(3,3))
array(1:27, dim = c(3,3,3))
array(1:27, dim = c(2,2,3))
array(0, dim = c(2,2,3))
library(reticulate)
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 3)
utility
View(utility)
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
# c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 3)
utility <- estimate_knapsack_utility(items, 3)# %>% distinct()
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1],
# c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 3)
utility <- estimate_knapsack_utility(items, 3)# %>% distinct()
utility
sum(utility$utility)
install.packages("reticulate")
library(reticulate)
permutations(3)
permutations(110)
permutations(4)
permutations(5)
# For data manipulation
library(dplyr)
library(purrr)
library(purrr)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# Knapsack functions
source("../r/knapsack_functions_mat.R")
# Simulation settings
n_draws = 10000
install.packages("reticulate")
# For data manipulation
library(dplyr)
library(purrr)
library(purrr)
# For linear programming
library(ROI)
# Setup Viz Lab Computer
install.packages(c(
# These are installed, but not correctly
"slam", "utf8",
# For minimax
"RcppAlgos", "compiler", "e1071", "ROI",
"ompr", "ROI.plugin.glpk", "ompr.roi"
))
install.packages(c("slam", "utf8", "RcppAlgos", "compiler", "e1071", "ROI", "ompr", "ROI.plugin.glpk", "ompr.roi"))
install.packages(c("slam", "utf8", "RcppAlgos", "compiler", "e1071", "ROI", "ompr", "ROI.plugin.glpk", "ompr.roi"))
# For data manipulation
library(dplyr)
library(purrr)
library(purrr)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# For python
library(reticulate)
# For data manipulation
library(dplyr)
library(purrr)
library(purrr)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# For python
library(reticulate)
use_python("C:/ProgramData/Anaconda3/python.exe")
use_python("C:/ProgramData/Anaconda3/python.exe")
# For data manipulation
library(dplyr)
library(purrr)
library(purrr)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# For python
library(reticulate)
use_python("C:/ProgramData/Anaconda3/python.exe")
knitr::opts_chunk$set(engine.path = list(python = "C:/ProgramData/Anaconda3/python.exe"))
# For data manipulation
library(dplyr)
library(purrr)
library(purrr)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# For python
library(reticulate)
use_python("C:/ProgramData/Anaconda3/python.exe")
knitr::opts_chunk$set(engine.path = list(python = "C:/ProgramData/Anaconda3/python.exe"))
knitr::opts_chunk$set(engine.path = list(python = "C:/ProgramData/Anaconda3/python.exe"))
def match_results(match):
opp_max = np.amax(match[1:len(match)])
actual_max = np.amax(match)
# Loss
if match[0] < opp_max:
return(-1)
# total win
elif all(match[0] > match[1:len(match)]):
return(len(match)-1)
# splitwin
else:
return((len(match)-sum(match == actual_max))/(sum(match == actual_max)))
# For data manipulation
library(dplyr)
library(purrr)
library(purrr)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# For python
library(reticulate)
use_python("C:/ProgramData/Anaconda3/python.exe")
test = list2env(py$testu)
library(ROI.plugin.glpk)
# For data manipulation
library(dplyr)
library(purrr)
library(purrr)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# For python
library(reticulate)
use_python("C:/ProgramData/Anaconda3/python.exe")
source_python("../py/estimate_utility.py")
library(reticulate)
use_python("C:/ProgramData/Anaconda3/python.exe")
# Load utility functions
source_python("../py/estimate_utility.py")
# and Numpy
np <- import("numpy", convert=FALSE)
np_array(matrix(c(1,2,3,4, ncol = 2)))
np_array(matrix(c(1,2,3,4), ncol = 2)))
np_array(matrix(c(1,2,3,4), ncol = 2))
np_array(matrix(1:9, ncol = 3))
est_knap_u(np_array(matrix(1:9, ncol = 3)), 3)
est_knap_u(np_array(matrix(1:9, ncol = 3)), n_players = 3)
est_knap_u(np_array(matrix(1:9, ncol = 3)), n_players = 2)
test = np_array(matrix(1:9, ncol = 3))
est_knap_u(test, n_players = 2)
est_knap_u(test, n_players = as.integer(2))
system("python py/estimate_utility.py")
library(reticulate)
use_python("C:/ProgramData/Anaconda3/python.exe")
# Load utility functions
source_python("../py/estimate_utility.py")
# and Numpy
np <- import("numpy", convert=FALSE)
np_array(matrix(1:9, ncol = 3))
test <- np_array(matrix(1:9, ncol = 3))
est_knap_u(test, n_players = as.integer(2))
list2env(est_knap_u(test, n_players = as.integer(2)))
?add_constraint
# Setup Viz Lab Computer
install.packages(c(
# These are installed, but not correctly
"slam", "utf8",
# For minimax
"RcppAlgos", "compiler", "e1071", "ROI",
"ompr", "ROI.plugin.glpk", "ompr.roi"
))
install.packages(c("slam", "utf8", "RcppAlgos", "compiler", "e1071", "ROI", "ompr", "ROI.plugin.glpk", "ompr.roi"))
install.packages("joblib")
install.packages("reticulate")
# For data manipulation
library(dplyr)
library(purrr)
library(tidyr)
library(e1071)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# Plotting
library(ggplot2)
library(ggthemes)
theme_set(theme_tufte())
# Minimax
source("../r/n_player_minimax.R")
# Simulation settings
n_draws <- 1000
setwd("notebooks/")
# For data manipulation
library(dplyr)
library(purrr)
library(tidyr)
library(e1071)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# Plotting
library(ggplot2)
library(ggthemes)
theme_set(theme_tufte())
# Minimax
source("../r/n_player_minimax.R")
# Simulation settings
n_draws <- 1000
install.packages("ggthemes")
theme_set(theme_tufte())
library(ggthemes)
theme_set(theme_tufte())
library(reticulate)
use_python("C:/ProgamData/Anaconda3/python.exe")
# Load utility functions
source_python("../py/estimate_utility.py")
# and Numpy
np <- import("numpy", convert=FALSE)
n_draws <- 500
n_items <- 20
# Generate items
items <- sapply(seq(1, 10, length.out = n_items), function(x) runif(n_draws, -x, x))
# Estimate utility
items_u <- est_knap_u(items, n_players)
n_players <- as.integer(4)
n_draws <- 500
n_items <- 20
# Generate items
items <- sapply(seq(1, 10, length.out = n_items), function(x) runif(n_draws, -x, x))
# items <- np_array(sapply(seq(1, 10, length.out = n_items), function(x) sample(seq(-x, x, length.out = n_draws))))
# A density plot
# items %>%
#   as.matrix() %>%
#   as_tibble() %>%
#   gather(item, val) %>%
#   ggplot(aes(val, colour = item, fill = item)) +
#   geom_density(alpha = 0.10) +
#   scale_fill_viridis_d() +
#   scale_colour_viridis_d() +
#   theme(legend.position = "none", axis.title = element_blank())
# Estimate utility
items_u <- est_knap_u(items, n_players)
n_players <- as.integer(4)
n_draws <- 500
n_items <- 20
# Generate items
items <- sapply(seq(1, 10, length.out = n_items), function(x) runif(n_draws, -x, x))
# items <- np_array(sapply(seq(1, 10, length.out = n_items), function(x) sample(seq(-x, x, length.out = n_draws))))
# A density plot
# items %>%
#   as.matrix() %>%
#   as_tibble() %>%
#   gather(item, val) %>%
#   ggplot(aes(val, colour = item, fill = item)) +
#   geom_density(alpha = 0.10) +
#   scale_fill_viridis_d() +
#   scale_colour_viridis_d() +
#   theme(legend.position = "none", axis.title = element_blank())
# Estimate utility
items_u <- est_knap_u(items, n_players, parallel = TRUE)
# And run minimax
mini <- minimax(list2env(items_u), n_players)
mini$solution
# Minimax components
mini_comp <- paste0("V", which(mini$solution[-length(mini$solution)] > 0))
# minimax probabilities
mini_pr <- data_frame(
pr = mini$solution[-length(mini$solution)],
item = paste0("V", 1:(length(mini$solution)-1))
)
items <- as.matrix(items)
# Create a mixture distribution and append to the end of items
items_aug <- cbind(
items,
map(1:(length(mini$solution) - 1), ~ {
if (mini$solution[.x] > 0)
sample(items[,.x], ceiling(n_draws*mini$solution[.x]))
else
numeric()
}) %>%
unlist() %>%
.[1:n_draws]
)
# To dataframe
items_aug <- items_aug %>%
as_data_frame() %>%
gather(item, val) %>%
mutate(item = ifelse(item == paste0("V", (ncol(items) + 1)), "Minimax", item),
mark = case_when(item == "Minimax" ~ "Minimax",
item %in% mini_comp ~ "Minimax Componenst",
T ~ "Not Used by Minimax"))
# Plot again
ggplot(items_aug, aes(val, fill = item, colour = item)) +
geom_density(alpha = 0.3) +
facet_wrap(. ~ mark, ncol = 1) +
scale_fill_viridis_d() +
scale_colour_viridis_d() +
theme(legend.position = "none") +
theme(axis.ticks = element_blank(), axis.text = element_blank(), axis.title = element_blank())
ggsave("../plots/final/uniform_dists.png", width = 6, height = 3)
# For data manipulation
library(dplyr)
library(purrr)
library(tidyr)
library(e1071)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# Plotting
library(ggplot2)
library(ggthemes)
theme_set(theme_tufte())
# Minimax
source("../r/n_player_minimax.R")
library(reticulate)
use_python("C:/ProgamData/Anaconda3/python.exe")
# Load utility functions
source_python("../py/estimate_utility.py")
# and Numpy
np <- import("numpy", convert=FALSE)
n_players <- as.integer(4)
n_draws <- 500
n_items <- 20
# Generate items
items <- sapply(seq(1, 10, length.out = n_items), function(x) runif(n_draws, -x, x))
# items <- np_array(sapply(seq(1, 10, length.out = n_items), function(x) sample(seq(-x, x, length.out = n_draws))))
# A density plot
# Estimate utility
items_u <- est_knap_u(items, n_players, parallel = TRUE)
# Estimate utility
items_u <- est_knap_u(items, n_players)
n_players <- as.integer(4)
n_draws <- 500
```{r uniform-items-2, warning = FALSE, cache = TRUE}
n_players <- as.integer(3)
n_draws <- 500
n_items <- 10
# Generate items
items <- sapply(seq(1, 10, length.out = n_items), function(x) runif(n_draws, -x, x))
# Estimate utility
items_u <- est_knap_u(items, n_players)
# Estimate utility
items_u <- est_knap_u(items, n_players, parallel = TRUE)
