install.packages("slam")
install.packages("utf8")
library(dplyr)
library(purrr)
library(purrr)
source("../r/knapsack_functions_mat.R")
n_draws = 100000
# Setup Viz Lab Computer
install.packages(c(
# These are installed, but not correctly
"slam", "utf8",
# For minimax
"RcppAlgos", "compiler", "e1071", "ROI",
"ompr", "ROI.plugin.glpk", "ompr.roi"
))
# Setup Viz Lab Computer
install.packages(c(
# These are installed, but not correctly
"slam", "utf8",
# For minimax
"RcppAlgos", "compiler", "e1071", "ROI",
"ompr", "ROI.plugin.glpk", "ompr.roi"
))
install.packages(c("slam", "utf8", "RcppAlgos", "compiler", "e1071", "ROI", "ompr", "ROI.plugin.glpk", "ompr.roi"))
install.packages(c("slam", "utf8", "RcppAlgos", "compiler", "e1071", "ROI", "ompr", "ROI.plugin.glpk", "ompr.roi"))
install.packages(c("slam", "utf8", "RcppAlgos", "compiler", "e1071", "ROI", "ompr", "ROI.plugin.glpk", "ompr.roi"))
?rbinom
?Binomial
rbinom(1, 1, 0.5)
rbinom(1, 1, 0.5)
rbinom(10, 1, 0.5)
rbinom(10, 2, 0.5)
rbinom(10, 3, 0.5)
rbinom(10, 1, 0.5)
rbinom(100, 1, 0.5)
rbinom(100, 1, 0.5)
rbinom(100, 1, 0.5) + 1
c(-3, 3)[rbinom(100, 1, 0.5) + 1]
mean(c(-3, 3)[rbinom(100, 1, 0.5) + 1])
c(-3, 3)
?c
c(1,2,3,4,5,6)[0]
c(1,2,3,4,5,6)[1]
c(1,2,3,4,5,6)[5]
c(1,2,3,4,5,6)[5, 4]
c(1,2,3,4,5,6)[c(5, 4)]
c(1,2,3,4,5,6)[c(5, 4, 5)]
rbinom(10, 3, 0.5)
rbinom(10, 3, 0.5)
c(-3, 3)[rbinom(100, 1, 0.5) + 1]
library(dplyr)
library(purrr)
library(purrr)
source("../r/knapsack_functions_mat.R")
n_draws = 1000
matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1],
), ncol = 4)
matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
mean(items[,1])
mean(items[,2])
mean(items[,3])
mean(items[1,3])
mean(items[,3])
n_draws = 10000
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
mean(items[,3])
mean(items[,2])
mean(items[,1])
plot(density(items[,1]))
plot(density(items[,2]))
plot(density(items[,3]))
lines(density(items[,3]))
plot(density(items[,1]), colour = "red")
plot(density(items[,1]), color = "red")
?plot
plot(density(items[,1]), col = "red")
lines(density(items[,2]), col = "green")
plot(density(items[,3]), col = "red")
lines(density(items[,2]), col = "green")
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
estimate_knapsack_utility(items, 4)
utility <- estimate_knapsack_utility(items, 3)
strat_minimax_3(items)
strat_minimax_3(utility)
# For data manipulation
library(dplyr)
library(purrr)
library(purrr)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# Knapsack functions
source("../r/knapsack_functions_mat.R")
# Simulation settings
n_draws = 10000
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 3)
strat_minimax_3(utility)
mini <- strat_minimax_3(utility)
mini
mini$solution
utility
sort(unique(utility$knap_id))
utility %>% group_by(knap_id) %>% summarise_if(is.numeric, mean)
utility <- estimate_knapsack_utility(items, 2)
mini <- strat_minimax_2(utility)
mini
mini$solution
mini
table(items[,1] > items[,2])
table(items[,1] > items[,3])
table(items[,1] > items[,4])
# Two player minimax
strat_minimax_2 <- function(knaps, print_results = F) {
row_strats <- sort(unique(knaps$knap_id))
col_strats <- sort(unique(knaps$knap_id))
tmp <- suppressWarnings(
MIPModel() %>%
add_variable(row_utility, type = "continuous") %>%
add_variable(row_pr[i], i = row_strats, type = "continuous", lb = 0, ub = 1) %>%
set_objective(row_utility, "max") %>%
add_constraint(sum_expr(row_pr[i]*knaps$utility[knaps$knap_id == i & knaps$matchup == paste0(sort(c(i, j)), collapse = ";")], i = row_strats) >= row_utility,
j = col_strats) %>%
add_constraint(sum_expr(row_pr[i], i = row_strats) == 1) %>%
solve_model(with_ROI(solver = "glpk"))
)
if (print_results)
print(tmp$solution)
# data_frame(knap_id = row_strats,
#            probability = as.numeric(tmp$solution)[-(length(row_strats)+1)]) %>%
#   left_join(knaps, by = "knap_id")
tmp
}
strat_minimax_2 <- cmpfun(strat_minimax_2)
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 2)
mini <- strat_minimax_2(utility)
mini
mini$solution
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 2)
mini <- strat_minimax_2(utility)
mini
mini$solution
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 2)
mini <- strat_minimax_2(utility)
mini
mini$solution
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 2)
mini <- strat_minimax_2(utility)
mini
mini$solution
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 2)
mini <- strat_minimax_2(utility)
mini
mini$solution
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 2)
mini <- strat_minimax_2(utility)
mini
mini$solution
source('C:/Users/be52/ad_knap/r/knapsack_functions_mat.R', echo=TRUE)
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 2)
mini <- strat_minimax_2(utility)
mini
mini$solution
utility <- estimate_knapsack_utility(items, 2) %>% distinct()
mini <- strat_minimax_2(utility)
mini
mini$solution
utility <- estimate_knapsack_utility(items, 2) %>% distinct()
mini <- strat_minimax_2(utility)
mini
mini$solution
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 2) %>% distinct()
mini <- strat_minimax_2(utility)
mini
mini$solution
apply(items, 2, mean)
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 2) %>% distinct()
mini <- strat_minimax_2(utility)
mini
mini$solution
apply(items, 2, mean)
items <- matrix(c(
c(-1, 1)[rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 3) %>% distinct()
mini <- strat_minimax_3(utility)
mini
mini$solution
apply(items, 2, mean)
utility
c(-1, 1)[rep(c(1,2), 10)]
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
items
apply(items, 2, mean)
tble(items)
table(items)
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 3) %>% distinct()
mini <- strat_minimax_3(utility)
mini
mini$solution
apply(items, 2, mean)
utility
utility <- estimate_knapsack_utility(items, 3)
sum(utility$utility)
utility <- data_frame(
knap_id = c(1, 1, 1, 2, 2, 2),
matchup = c("1;1;1", "1;1;2", "1;2;2", "2;1;1", "2;2;1", "2;2;2"),
utility = c(0, -0.25, 0.5, 0.5, -0.25, 0)
)
mini <- strat_minimax_3(utility)
utility <- estimate_knapsack_utility(items, 3)
utilit
utility
utility <- data_frame(
knap_id = c(1, 1, 1, 2, 2, 2),
matchup = c("1;1;1", "1;1;2", "1;2;2", "2;1;1", "2;2;1", "2;2;2"),
utility = c(0, -0.25, 0.5, 0.5, -0.25, 0)
)
utility
strat_minimax_3(utility)
mini <- strat_minimax_2(utility)
# Three player minimax
strat_minimax_3 <- function(knaps, print_results = F) {
strats <- sort(unique(knaps$knap_id))
tmp <- MIPModel() %>%
add_variable(row_utility, type = "continuous") %>%
add_variable(row_pr[i], i = strats, type = "continuous", lb = 0, ub = 1) %>%
set_objective(row_utility, "max") %>%
add_constraint(sum_expr(row_pr[i]*knaps$utility[knaps$knap_id == i & knaps$matchup == paste0(sort(c(i, j, k)), collapse = ";")], i = strats) >= row_utility,
j = strats, k = strats) %>%
add_constraint(sum_expr(row_pr[i], i = strats) == 1) %>%
solve_model(with_ROI(solver = "glpk"))
tmp
# if (print_results)
#   print(tmp$solution)
# data_frame(knap_id = strats,
#            probability = as.numeric(tmp$solution)[-(length(strats)+1)]) %>%
#   left_join(knaps, by = "knap_id")
}
strat_minimax_3 <- cmpfun(strat_minimax_3)
utility <- data_frame(
knap_id = c(1, 1, 1, 2, 2, 2),
matchup = c("1;1;1", "1;1;2", "1;2;2", "2;1;1", "2;2;1", "2;2;2"),
utility = c(0, -0.25, 0.5, 0.5, -0.25, 0)
)
mini <- strat_minimax_3(utility)
strats <- sort(unique(knaps$knap_id))
utility <- data_frame(
knap_id = c(1, 1, 1, 2, 2, 2),
matchup = c("1;1;1", "1;1;2", "1;2;2", "2;1;1", "2;2;1", "2;2;2"),
utility = c(0, -0.25, 0.5, 0.5, -0.25, 0)
)
utility
strats <- sort(unique(utility$knap_id))
strats
utility
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
# utility <- estimate_knapsack_utility(items, 3)# %>% distinct()
utility <- data_frame(
knap_id = c(1, 1, 1, 2, 2, 2),
matchup = c("1;1;1", "1;1;2", "1;2;2", "2;1;1", "2;2;1", "2;2;2"),
utility = c(0, -0.25, 0.5, 0.5, -0.25, 0)
)
mini <- strat_minimax_3(utility)
apply(items, 2, mean)
strats <- sort(unique(utility$knap_id))
MIPModel() %>%
add_variable(row_utility, type = "continuous") %>%
add_variable(row_pr[i], i = strats, type = "continuous", lb = 0, ub = 1) %>%
set_objective(row_utility, "max") %>%
add_constraint(sum_expr(row_pr[i]*utility$utility[utility$knap_id == i & utility$matchup == paste0(sort(c(i, j, k)), collapse = ";")], i = strats) >= row_utility,
j = strats, k = strats) %>%
add_constraint(sum_expr(row_pr[i], i = strats) == 1) %>%
solve_model(with_ROI(solver = "glpk"))
MIPModel() %>%
add_variable(row_utility, type = "continuous") %>%
add_variable(row_pr[i], i = strats, type = "continuous", lb = 0, ub = 1) %>%
set_objective(row_utility, "max")
strats <- sort(unique(utility$knap_id))
MIPModel() %>%
add_variable(row_utility, type = "continuous") %>%
add_variable(row_pr[i], i = strats, type = "continuous", lb = 0, ub = 1) %>%
set_objective(row_utility, "max") %>%
add_constraint(sum_expr(row_pr[i]*utility$utility[utility$knap_id == i & utility$matchup == paste0(sort(c(i, j, k)), collapse = ";")], i = strats) >= row_utility,
j = strats, k = strats)
?array
array(1:9, dims = 3)
array(1:9, dim = 1:3)
array(1:9, dim = c(3,3))
array(1:27, dim = c(3,3,3))
array(1:27, dim = c(2,2,3))
array(0, dim = c(2,2,3))
library(reticulate)
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 4)
utility <- estimate_knapsack_utility(items, 3)
utility
View(utility)
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
# c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 3)
utility <- estimate_knapsack_utility(items, 3)# %>% distinct()
items <- matrix(c(
c(-1, 1)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-2, 2)[rep(c(1, 2), n_draws)], # [rbinom(n_draws, 1, 0.5) + 1],
c(-3, 3)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1],
# c(-4, 4)[rep(c(1, 2), n_draws)] # [rbinom(n_draws, 1, 0.5) + 1]
), ncol = 3)
utility <- estimate_knapsack_utility(items, 3)# %>% distinct()
utility
sum(utility$utility)
install.packages("reticulate")
library(reticulate)
permutations(3)
permutations(110)
permutations(4)
permutations(5)
# For data manipulation
library(dplyr)
library(purrr)
library(purrr)
# For linear programming
library(ROI)
library(ROI.plugin.glpk)
library(ompr)
library(ompr.roi)
# Knapsack functions
source("../r/knapsack_functions_mat.R")
# Simulation settings
n_draws = 10000
